--- Osmose/PrecisionTimer.cpp.orig	2006-11-06 11:08:38.000000000 +0000
+++ Osmose/PrecisionTimer.cpp	2008-02-01 21:39:17.000000000 +0000
@@ -12,8 +12,45 @@
 * URL: http://bcz.emu-france.com/
 *****************************************************************************/
 #include "PrecisionTimer.h"
+#include <stdlib.h>
 
-#define rdtsc(val) __asm__ __volatile__ ("rdtsc" : "=A" (val))
+#if defined(__i386__)
+static __inline__ unsigned long long rdtsc(void)
+{
+  unsigned long long int x;
+     __asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
+     return x;
+}
+
+#elif defined(__x86_64__)
+static __inline__ unsigned long long rdtsc(void)
+{
+  unsigned hi, lo;
+  __asm__ __volatile__ ("rdtsc" : "=a"(lo), "=d"(hi));
+  return ( (unsigned long long)lo)|( ((unsigned long long)hi)<<32 );
+}
+
+#elif defined(__powerpc__)
+static __inline__ unsigned long long rdtsc(void)
+{
+  unsigned long long int result=0;
+  unsigned long int upper, lower,tmp;
+  __asm__ volatile(
+                "0:                  \n"
+                "\tmftbu   %0           \n"
+                "\tmftb    %1           \n"
+                "\tmftbu   %2           \n"
+                "\tcmpw    %2,%0        \n"
+                "\tbne     0b         \n"
+                : "=r"(upper),"=r"(lower),"=r"(tmp)
+                );
+  result = upper;
+  result = result<<32;
+  result = result|lower;
+
+  return(result);
+}
+#endif
 
 /*--------------------------------------------------------------------*/
 /* Default Constructor initialise values to -1;                       */
@@ -43,9 +80,9 @@
     {    
 	cout << "Calibrating:" << dec<< s << " seconds." << endl;
     }	
-    rdtsc(start);
+    start=rdtsc();
     PORTABLE_SLEEP_FUNC;
-    rdtsc(stop);
+    stop=rdtsc();
     tick_per_second = (unsigned long long) ( stop - start );
     tick_per_second = (tick_per_second / s);
     if (verbose)
@@ -60,7 +97,7 @@
 /*--------------------------------------------------------------------*/
 void PrecisionTimer::start()
 {
-    rdtsc(T0);
+    T0=rdtsc();
 }
 
 /*--------------------------------------------------------------------*/
@@ -74,7 +111,7 @@
 {
     bool ret = false;
     
-    rdtsc(T1);
+    T1=rdtsc();
     if (mode == CUMULATIVE)
     {
          cumulative_buffer[cumul_buffer_index] = getOneShotDuration();
